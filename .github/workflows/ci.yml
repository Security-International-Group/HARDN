name: ci

on:
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            debhelper \
            devscripts \
            lintian \
            fakeroot \
            equivs \
            dpkg-dev \
            pkg-config \
            libssl-dev \
            libvte-2.91-gtk4-dev \
            python3-all \
            python3-requests \
            curl \
            whiptail

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921
        with:
          toolchain: stable

      - name: Cache cargo registry and git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install build dependencies from debian/control
        run: |
          cd "$GITHUB_WORKSPACE"
          if [ ! -f debian/control ]; then
            echo "ERROR: debian/control file not found!"
            ls -l debian/ || true
            exit 1
          fi
          sudo mk-build-deps -i debian/control --tool "apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y"

      - name: Build Rust binaries
        run: |
          cargo build --release --bins
          # Verify all expected binaries were built
          ls -la target/release/
          test -f target/release/hardn || { echo "hardn binary not found"; exit 1; }
          test -f target/release/hardn-monitor || { echo "hardn-monitor binary not found"; exit 1; }
          test -f target/release/hardn-gui || { echo "hardn-gui binary not found"; exit 1; }

      - name: Run Rust tests
        run: cargo test --all --all-features --verbose

      - name: Build Debian package with dpkg-buildpackage
        id: deb-build
        run: |
          # Set build options for reproducible builds and parallel processing
          export DEB_BUILD_OPTIONS="parallel=$(nproc) nodwz nocheck"

          # Build the package using dpkg-buildpackage
          dpkg-buildpackage -us -uc -b --no-pre-clean -j"$(nproc)"

          # Find the generated .deb file
          DEB_FILE=$(find .. -name "hardn_*.deb" -type f | head -n1)
          if [ -z "$DEB_FILE" ]; then
            echo "ERROR: No .deb file found after build"
            ls -la ../
            exit 1
          fi

          # Get package info
          VERSION=$(dpkg-deb -f "$DEB_FILE" Version)
          ARCH=$(dpkg-deb -f "$DEB_FILE" Architecture)

          # Create dist directory and copy package and build artifacts
          mkdir -p dist
          DEB_NAME="hardn_${VERSION}_${ARCH}.deb"
          cp "$DEB_FILE" "dist/${DEB_NAME}"

          # Copy build artifacts for upload
          cp ../*.build "dist/" 2>/dev/null || true
          cp ../*.buildinfo "dist/" 2>/dev/null || true
          cp ../*.changes "dist/" 2>/dev/null || true

          echo "Built package: $DEB_NAME"
          echo "Package path: dist/${DEB_NAME}"
          echo "deb_path=dist/${DEB_NAME}" >> "$GITHUB_OUTPUT"
          echo "deb_name=${DEB_NAME}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Test Debian package with lintian
        run: |
          DEB_FILE="${{ steps.deb-build.outputs.deb_path }}"
          echo "Running lintian checks on $DEB_FILE"
          lintian --display-info --display-experimental --pedantic "$DEB_FILE" || true

      - name: Test package installation in clean environment
        timeout-minutes: 10
        run: |
          DEB_FILE="${{ steps.deb-build.outputs.deb_path }}"

          # Test package info
          echo "=== Package Information ==="
          dpkg-deb -I "$DEB_FILE"

          echo "=== Package Contents ==="
          dpkg-deb -c "$DEB_FILE"

          echo "=== Testing Installation ==="
          # Install the package
          sudo dpkg -i "$DEB_FILE" || true

          # Fix any dependency issues
          sudo apt-get install -f -y

          # Verify installation
          dpkg -l | grep hardn || true

          echo "=== Testing Binary Execution ==="
          # Test that binaries can run (basic smoke test)
          echo "Testing hardn binary..."
          hardn --version || echo "hardn version check failed"
          hardn --help >/dev/null || echo "hardn help failed"

          # Test hardn-monitor with strict timeout to prevent infinite loop
          echo "Testing hardn-monitor (with 3-second timeout)..."
          timeout 3s hardn-monitor 2>/dev/null && echo "hardn-monitor started successfully" || echo "hardn-monitor test completed (expected timeout after service monitoring check)"

          # Test hardn-gui in headless environment (expected to fail gracefully)
          echo "Testing hardn-gui (expected to fail in headless CI)..."
          timeout 3s hardn-gui --version 2>/dev/null || echo "hardn-gui test completed (expected failure in headless environment)"

          # Ensure no background processes are still running
          echo "Cleaning up any remaining processes..."
          pkill -f hardn-monitor || true
          pkill -f hardn-gui || true
          sleep 1

          echo "=== Testing Package Removal ==="
          # Test package removal
          sudo dpkg -r hardn

          echo "Package installation and removal test completed successfully"

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: hardn-deb-package
          path: dist/*.deb
          retention-days: 30

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build-logs
          path: |
            dist/*.build
            dist/*.buildinfo
            dist/*.changes
          retention-days: 7

  deploy-test:
    name: Deploy and Integration Test
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Download Debian package artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: hardn-deb-package
          path: release_assets

      - name: Include release imagery assets
        run: |
          mkdir -p release_assets
          cp docs/assets/IMG_1233.jpeg release_assets/IMG_1233.jpeg

      - name: Integration test in fresh container
        timeout-minutes: 8
        run: |
          DEB_FILE=$(ls release_assets/*.deb | head -n1)
          echo "Testing deployment of: $DEB_FILE"

          # Verify package integrity
          dpkg-deb --info "$DEB_FILE"
          dpkg-deb --contents "$DEB_FILE"

          # Install required dependencies first
          sudo apt-get update
          sudo apt-get install -y \
            python3 \
            python3-fastapi \
            python3-uvicorn \
            python3-requests \
            python3-psutil \
            adduser \
            curl \
            wget \
            lsof \
            psmisc \
            procps \
            git \
            libvte-2.91-gtk4-0

          # Install the package
          sudo dpkg -i "$DEB_FILE"

          # Verify installation
          echo "=== Verifying Installation ==="
          which hardn
          which hardn-monitor
          which hardn-gui

          # Test basic functionality
          echo "=== Testing Basic Functionality ==="
          hardn --version
          timeout 3s hardn --help >/dev/null || echo "hardn help test completed"

          # Quick test of hardn-monitor (with timeout)
          echo "Quick hardn-monitor validation..."
          timeout 2s hardn-monitor 2>/dev/null || echo "hardn-monitor validation completed"

          # Test systemd service files
          echo "=== Testing Service Integration ==="
          ls -la /lib/systemd/system/hardn*.service || true

          # Test configuration files
          echo "=== Testing Configuration ==="
          ls -la /etc/aide/ || true
          ls -la /usr/share/hardn/ || true

          echo "Integration test completed successfully"

  release:
    name: Create Release
    needs: [build, deploy-test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Download Debian package artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: hardn-deb-package
          path: release_assets

      - name: Ensure tags are present
        run: |
          git fetch --tags --force --prune

      - name: Get version for semantic tagging
        id: version
        run: |
          DEB_FILE=$(ls release_assets/*.deb | head -n1)
          VERSION=$(dpkg-deb -f "$DEB_FILE" Version)
          ARCH=$(dpkg-deb -f "$DEB_FILE" Architecture)
          DEB_NAME=$(basename "$DEB_FILE")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "architecture=$ARCH" >> "$GITHUB_OUTPUT"
          echo "deb_name=$DEB_NAME" >> "$GITHUB_OUTPUT"
          echo "Version extracted: $VERSION"
          echo "Architecture: $ARCH"

      - name: Determine next tag
        id: tag
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing semantic tag found; defaulting to 0.0.0"
            LATEST_TAG="0.0.0"
          fi

          PREFIX=""
          VERSION_PART="$LATEST_TAG"
          if [[ "$LATEST_TAG" == v* ]]; then
            PREFIX="v"
            VERSION_PART="${LATEST_TAG#v}"
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_PART"
          if [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
            echo "Unable to parse latest tag: $LATEST_TAG"
            exit 1
          fi

          PATCH=$((10#$PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="${PREFIX}${NEW_VERSION}"

          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "Calculated next tag: $NEW_TAG (from $LATEST_TAG)"

      - name: Create and push release tag
        run: |
          NEW_TAG="${{ steps.tag.outputs.new_tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists; skipping creation."
          else
            git tag "$NEW_TAG"
            git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/Security-International-Group/HARDN.git "$NEW_TAG"
          fi

      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ steps.tag.outputs.new_tag }}"
          VERSION="${{ steps.version.outputs.version }}"
          ARCH="${{ steps.version.outputs.architecture }}"
          DEB_NAME="${{ steps.version.outputs.deb_name }}"
          DEB_FILE="release_assets/$DEB_NAME"

          SIZE=$(du -h "$DEB_FILE" | cut -f1)
          SHA256=$(sha256sum "$DEB_FILE" | awk '{print $1}')
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC)')
          DOCS_URL="https://github.com/${{ github.repository }}/tree/main/docs"

          cat > RELEASE_NOTES.md <<EOF
          ![HARDN](docs/assets/IMG_1233.jpeg)

          # HARDN $TAG

          > Automated release generated on $BUILD_DATE.

          ## Package Details
          - **Debian package**: `$DEB_NAME`
          - **Project version**: `$VERSION`
          - **Architecture**: `$ARCH`
          - **Size**: `$SIZE`
          - **SHA256**: `$SHA256`

          ## Installation
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/$TAG/$DEB_NAME
          sudo dpkg -i $DEB_NAME
          sudo apt-get install -f -y
          ```
         - The Lau

          ## What's Inside
          - HARDN CLI, monitoring service, and GTK-based GUI
          - Systemd service units and baseline configuration
          - Legion security modules and automated hardening utilities

          ## Documentation
          Explore the docs: $DOCS_URL

          ---

          Built with dpkg-buildpackage • Validated by integration tests
          EOF
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          target_commitish: ${{ github.sha }}
          name: HARDN ${{ steps.tag.outputs.new_tag }}
          body_path: RELEASE_NOTES.md
          files: |
            release_assets/*.deb
            release_assets/IMG_1233.jpeg
          draft: false
          prerelease: false
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Discord notification
        if: always()
        shell: bash
        env:
          WEBHOOK: ${{ secrets.DEV_UPDATES_DISCORD_WEBHOOK }}
        run: |
          STATUS="${{ job.status }}"
          VERSION="${{ steps.version.outputs.version }}"
          DEB_NAME="${{ steps.version.outputs.deb_name }}"
          MSG="https://github.com/${{ github.repository }}/releases/tag/latest"

          if command -v hardn-discord.sh >/dev/null 2>&1; then
            if [[ "$STATUS" == "success" ]]; then
              hardn-discord.sh "LATEST RELEASE UPDATED" "HARDN Latest Updated (v${VERSION}): $MSG" || true
            else
              hardn-discord.sh "LATEST RELEASE FAILED" "Latest release update failed for v${VERSION} on branch ${{ github.ref_name }}" || true
            fi
          elif [[ -n "${WEBHOOK:-}" ]]; then
            COLOR=15105570  # Default gray
            [[ "$STATUS" == "success" ]] && COLOR=3066993 || true  # Green
            [[ "$STATUS" == "failure" ]] && COLOR=15158332 || true  # Red

            if [[ "$STATUS" == "success" ]]; then
              DESCRIPTION=" **Latest Release Updated**\\n**Package**: \`${DEB_NAME}\`\\n**Version**: \`${VERSION}\`\\n**Status**: **${STATUS}** on branch \`${{ github.ref_name }}\`\\nStatic download URL ready!"
            else
              DESCRIPTION=" **Latest Release Update Failed**\\n**Version**: \`${VERSION}\`\\n**Status**: **${STATUS}** on branch \`${{ github.ref_name }}\`"
            fi

            curl -H "Content-Type: application/json" -X POST "$WEBHOOK" \
              -d "{\"embeds\":[{\"title\":\"HARDN Latest Release Pipeline • ${{ github.repository }}\",\"description\":\"$DESCRIPTION\",\"color\":$COLOR,\"url\":\"$MSG\"}]}" || true
