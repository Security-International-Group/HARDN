name: ci

on:
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    name: Build Debian Package
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0


      - name: Install control
        run: |
          sudo apt-get update
          sudo apt-get install -y equivs devscripts
          cd $GITHUB_WORKSPACE
          equivs-control debian/control
          sudo mk-build-deps -i debian/control --tool "apt-get -y"

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Rust (stable)
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921
        with:
          toolchain: stable

      - name: Cargo build (release)
        run: cargo build --release

      - name: Cargo test
        run: cargo test --all --all-features --verbose

      - name: Install cargo-deb
        run: cargo install cargo-deb --locked

      - name: Build .deb package
        id: deb
        run: |
          cargo deb --no-strip
          mkdir -p dist
          DEB=$(ls target/debian/*.deb | head -n1)
          test -f "$DEB" || { echo "No .deb produced"; exit 1; }
          VER=$(dpkg-deb -f "$DEB" Version | sed 's/~/-/g')
          OUT="dist/hardn_${VER}_amd64.deb"
          cp -f "$DEB" "$OUT"
          echo "Built: $OUT"
          echo "deb_path=$OUT" >> $GITHUB_OUTPUT
          echo "deb_name=$(basename "$OUT")" >> $GITHUB_OUTPUT

      - name: Upload .deb artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: hardn-deb
          path: dist/*.deb

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Download .deb artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: hardn-deb
          path: release_assets

      - name: Ensure tags are present
        run: |
          git fetch --tags --force --prune

      - name: Get version for semantic tagging
        id: version
        run: |
          DEB_FILE=$(ls release_assets/*.deb | head -n1)
          VERSION=$(dpkg-deb -f "$DEB_FILE" Version | sed 's/~/-/g')
          DEB_NAME=$(basename "$DEB_FILE")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "deb_name=$DEB_NAME" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"

      - name: Create semantic version tag
        id: tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag --list | grep -q "^v"; then
            LATEST_TAG=$(git tag --list "v*" | sort -V | tail -n1)
            if [ -n "$LATEST_TAG" ]; then
              NEW_TAG=$(echo "$LATEST_TAG" | awk -F. '{print $1"."$2"."($3+1)}')
            else
              NEW_TAG="v${VERSION}"
            fi
          else
            NEW_TAG="v${VERSION}"
          fi
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Creating tag: $NEW_TAG"

      - name: Push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ steps.tag.outputs.new_tag }}"
          git push origin "${{ steps.tag.outputs.new_tag }}"

      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ steps.tag.outputs.new_tag }}"
          REPO="${{ github.repository }}"
          DEB_NAME="${{ steps.version.outputs.deb_name }}"
          cat > RELEASE_NOTES.md <<EOF
          ![HARDN Logo](docs/IMG_1233.jpeg)

          # HARDN ${TAG}

          Latest release of HARDN.

          ## What's Included
          - ${DEB_NAME} — Debian package
          - Systemd service integration
          - Security monitoring features

          _Note: Source archives are generated automatically by GitHub._
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}     
          target_commitish: ${{ github.sha }}
          name: HARDN ${{ steps.tag.outputs.new_tag }}
          body_path: RELEASE_NOTES.md
          files: release_assets/*.deb
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Discord notify
        if: always()
        shell: bash
        env:
          WEBHOOK: ${{ secrets. DEV_UPDATES_DISCORD_WEBHOOK }}
        run: |
          STATUS="${{ job.status }}"
          MSG="Install Test: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          if command -v hardn-discord.sh >/dev/null 2>&1; then
            if [[ "$STATUS" == "success" ]]; then
              hardn-discord.sh "OK" "$MSG" || true
            else
              hardn-discord.sh "FAILED" "$MSG" || true
            fi
          elif [[ -n "${WEBHOOK:-}" ]]; then
            COLOR=15105570
            [[ "$STATUS" == "success" ]] && COLOR=3066993 || true
            [[ "$STATUS" == "failure" ]] && COLOR=15158332 || true
            curl -H "Content-Type: application/json" -X POST "$WEBHOOK" \
              -d "{"embeds":[{"title":"Install Test • ${{ github.repository }}","description":"Status: **${{ job.status }}** on \\`${{ github.ref }}\\`","color":$COLOR,"url":"$MSG"}]}" || true
          else
            echo "[INFO] No Discord webhook configured; skipping notification."
          fi

