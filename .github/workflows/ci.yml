name: ci

on:
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    name: Build and Test Debian Package
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            debhelper-compat \
            devscripts \
            lintian \
            fakeroot \
            equivs \
            dpkg-dev \
            pkg-config \
            libssl-dev \
            libgtk-4-dev \
            libglib2.0-dev \
            libvte-2.91-gtk4-dev \
            python3-all \
            python3-requests \
            python3-setuptools \
            curl \
            wget \
            whiptail

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921
        with:
          toolchain: stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install build dependencies from debian/control
        run: |
          cd $GITHUB_WORKSPACE
          if [ ! -f debian/control ]; then
            echo "ERROR: debian/control file not found!"
            ls -l debian/
            exit 1
          fi
          sudo mk-build-deps -i debian/control --tool "apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y"

      - name: Build Rust binaries
        run: |
          cargo build --release --bins
          # Verify all expected binaries were built
          ls -la target/release/
          test -f target/release/hardn || { echo "hardn binary not found"; exit 1; }
          test -f target/release/hardn-monitor || { echo "hardn-monitor binary not found"; exit 1; }
          test -f target/release/hardn-gui || { echo "hardn-gui binary not found"; exit 1; }

      - name: Run Rust tests
        run: cargo test --all --all-features --verbose

      - name: Build Debian package with dpkg-buildpackage
        id: deb-build
        run: |
          # Set build options for reproducible builds and parallel processing
          export DEB_BUILD_OPTIONS="parallel=$(nproc) nodwz nocheck"

          # Build the package using dpkg-buildpackage
          dpkg-buildpackage -us -uc -b --no-pre-clean -j$(nproc)

          # Find the generated .deb file
          DEB_FILE=$(find .. -name "hardn_*.deb" -type f | head -n1)
          if [ -z "$DEB_FILE" ]; then
            echo "ERROR: No .deb file found after build"
            ls -la ../
            exit 1
          fi

          # Get package info
          VERSION=$(dpkg-deb -f "$DEB_FILE" Version)
          ARCH=$(dpkg-deb -f "$DEB_FILE" Architecture)

          # Create dist directory and copy package and build artifacts
          mkdir -p dist
          DEB_NAME="hardn_${VERSION}_${ARCH}.deb"
          cp "$DEB_FILE" "dist/${DEB_NAME}"

          # Copy build artifacts for upload
          cp ../*.build "dist/" 2>/dev/null || true
          cp ../*.buildinfo "dist/" 2>/dev/null || true
          cp ../*.changes "dist/" 2>/dev/null || true

          echo "Built package: $DEB_NAME"
          echo "Package path: dist/${DEB_NAME}"
          echo "deb_path=dist/${DEB_NAME}" >> $GITHUB_OUTPUT
          echo "deb_name=${DEB_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Test Debian package with lintian
        run: |
          DEB_FILE="${{ steps.deb-build.outputs.deb_path }}"
          echo "Running lintian checks on $DEB_FILE"
          lintian --display-info --display-experimental --pedantic "$DEB_FILE" || true

      - name: Test package installation in clean environment
        timeout-minutes: 10
        run: |
          DEB_FILE="${{ steps.deb-build.outputs.deb_path }}"

          # Test package info
          echo "=== Package Information ==="
          dpkg-deb -I "$DEB_FILE"

          echo "=== Package Contents ==="
          dpkg-deb -c "$DEB_FILE"

          echo "=== Testing Installation ==="
          # Install the package
          sudo dpkg -i "$DEB_FILE" || true

          # Fix any dependency issues
          sudo apt-get install -f -y

          # Verify installation
          dpkg -l | grep hardn

          echo "=== Testing Binary Execution ==="
          # Test that binaries can run (basic smoke test)
          echo "Testing hardn binary..."
          hardn --version || echo "hardn version check failed"
          hardn --help >/dev/null || echo "hardn help failed"

          # Test hardn-monitor with strict timeout to prevent infinite loop
          echo "Testing hardn-monitor (with 3-second timeout)..."
          timeout 3s hardn-monitor 2>/dev/null && echo "hardn-monitor started successfully" || echo "hardn-monitor test completed (expected timeout after service monitoring check)"

          # Test hardn-gui in headless environment (expected to fail gracefully)
          echo "Testing hardn-gui (expected to fail in headless CI)..."
          timeout 3s hardn-gui --version 2>/dev/null || echo "hardn-gui test completed (expected failure in headless environment)"

          # Ensure no background processes are still running
          echo "Cleaning up any remaining processes..."
          pkill -f hardn-monitor || true
          pkill -f hardn-gui || true
          sleep 1

          echo "=== Testing Package Removal ==="
          # Test package removal
          sudo dpkg -r hardn

          echo "Package installation and removal test completed successfully"

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: hardn-deb-package
          path: dist/*.deb
          retention-days: 30

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build-logs
          path: |
            dist/*.build
            dist/*.buildinfo
            dist/*.changes
          retention-days: 7

  deploy-test:
    name: Deploy and Integration Test
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Download Debian package artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: hardn-deb-package
          path: release_assets

      - name: Integration test in fresh container
        timeout-minutes: 8
        run: |
          DEB_FILE=$(ls release_assets/*.deb | head -n1)
          echo "Testing deployment of: $DEB_FILE"

          # Verify package integrity
          dpkg-deb --info "$DEB_FILE"
          dpkg-deb --contents "$DEB_FILE"

          # Install required dependencies first
          sudo apt-get update
          sudo apt-get install -y \
            python3 \
            python3-fastapi \
            python3-uvicorn \
            python3-requests \
            python3-psutil \
            adduser \
            curl \
            wget \
            lsof \
            psmisc \
            procps \
            git \
            libvte-2.91-gtk4-0

          # Install the package
          sudo dpkg -i "$DEB_FILE"

          # Verify installation
          echo "=== Verifying Installation ==="
          which hardn
          which hardn-monitor
          which hardn-gui

          # Test basic functionality
          echo "=== Testing Basic Functionality ==="
          hardn --version
          timeout 3s hardn --help >/dev/null || echo "hardn help test completed"

          # Quick test of hardn-monitor (with timeout)
          echo "Quick hardn-monitor validation..."
          timeout 2s hardn-monitor 2>/dev/null || echo "hardn-monitor validation completed"

          # Test systemd service files
          echo "=== Testing Service Integration ==="
          ls -la /lib/systemd/system/hardn*.service || true

          # Test configuration files
          echo "=== Testing Configuration ==="
          ls -la /etc/aide/ || true
          ls -la /usr/share/hardn/ || true

          echo "Integration test completed successfully"

  release:
    name: Create Release
    needs: [build, deploy-test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Download Debian package artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: hardn-deb-package
          path: release_assets

      - name: Ensure tags are present
        run: |
          git fetch --tags --force --prune

      - name: Get version for semantic tagging
        id: version
        run: |
          DEB_FILE=$(ls release_assets/*.deb | head -n1)
          VERSION=$(dpkg-deb -f "$DEB_FILE" Version)
          ARCH=$(dpkg-deb -f "$DEB_FILE" Architecture)
          DEB_NAME=$(basename "$DEB_FILE")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "architecture=$ARCH" >> $GITHUB_OUTPUT
          echo "deb_name=$DEB_NAME" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"
          echo "Architecture: $ARCH"

      - name: Prepare latest release
        id: tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Always use "latest" as the tag for a rolling release
          NEW_TAG="latest"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Creating/updating latest release (version: $VERSION)"

      - name: Delete existing latest tag and release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Delete the latest tag locally and remotely if it exists
          if git tag -l | grep -q "^latest$"; then
            git tag -d latest || true
          fi
          git push origin :refs/tags/latest || true

          echo "Cleaned up existing latest tag"

      - name: Create new latest tag
        run: |
          # Create a fresh latest tag pointing to current commit
          git tag latest
          git push origin latest
          echo "Created new latest tag"

      - name: Prepare release assets with static naming
        id: assets
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARCH="${{ steps.version.outputs.architecture }}"
          ORIGINAL_DEB="${{ steps.version.outputs.deb_name }}"

          # Create static filename for the release
          STATIC_DEB_NAME="hardn-latest_${ARCH}.deb"

          # Copy with static name
          cp "release_assets/$ORIGINAL_DEB" "release_assets/$STATIC_DEB_NAME"

          echo "static_deb_name=$STATIC_DEB_NAME" >> $GITHUB_OUTPUT
          echo "Renamed $ORIGINAL_DEB to $STATIC_DEB_NAME for static download URL"

      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ steps.tag.outputs.new_tag }}"
          VERSION="${{ steps.version.outputs.version }}"
          ARCH="${{ steps.version.outputs.architecture }}"
          STATIC_DEB_NAME="${{ steps.assets.outputs.static_deb_name }}"
          DEB_FILE="release_assets/$STATIC_DEB_NAME"

          # Get package size
          SIZE=$(du -h "$DEB_FILE" | cut -f1)
          BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

          cat > RELEASE_NOTES.md <<EOF
          # HARDN Latest Release

          **Debian Security Hardening Framework - Latest Debian Package**

          >  **Release**: This release is automatically updated with each build.

          ##  Package Information
          - **File**: \`${STATIC_DEB_NAME}\`
          - **Version**: \`${VERSION}\`
          - **Architecture**: \`${ARCH}\`
          - **Size**: \`${SIZE}\`
          - **Built**: \`${BUILD_DATE}\`

          ##  Installation

          ### Quick Install (Always Latest)
          \`\`\`bash
          # Download latest version (URL stays the same!)
          wget https://github.com/\${{ github.repository }}/releases/download/latest/${STATIC_DEB_NAME}
          sudo dpkg -i ${STATIC_DEB_NAME}

          # Fix any dependency issues
          sudo apt-get install -f

          # Start services
          sudo systemctl enable hardn-api
          sudo systemctl start hardn-api

          ### Usage
          \`\`\`bash
          # Command line interface
          hardn --help

          # Monitor service
          hardn-monitor --help

          # GUI interface (if X11/Wayland available)
          hardn-gui
          \`\`\`

          ##  What's Included

          ### Binaries
          - \`hardn\` - Main security hardening CLI
          - \`hardn-monitor\` - Real-time monitoring service
          - \`hardn-gui\` - GTK4 graphical interface
          - \`hardn-service-manager\` - Service management script

          ### System Integration
          - Systemd service files (\`hardn-api.service\`, \`hardn-monitor.service\`)
          - AIDE configuration templates
          - Security modules and tools
          - Configuration management

          ### Dependencies
          - Python 3 with FastAPI, Uvicorn, Requests, PSUtil
          - Standard system utilities (curl, wget, git, lsof, etc.)
          - GTK4 and VTE for GUI components

          ##  Security Features
          - Automated system hardening
          - Real-time security monitoring
          - Compliance checking and reporting
          - Log management and analysis
          - File integrity monitoring
          - Network security scanning

          ## Documentation
          See the [documentation](https://github.com/\${{ github.repository }}/tree/main/docs) for detailed usage instructions and security guidelines.

          ---

          **Built with dpkg-buildpackage** | **Tested on Ubuntu Latest** | **CI/CD Pipeline Validated**
          EOF

      - name: Delete existing latest release
        run: |
          # Delete the existing latest release if it exists
          gh release delete latest --yes || echo "No existing latest release to delete"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          target_commitish: ${{ github.sha }}
          name: HARDN ${{ steps.tag.outputs.new_tag }}
          body_path: RELEASE_NOTES.md
          files: release_assets/*.deb
          draft: false
          prerelease: false
          overwrite: true

      - name: Discord notification
        if: always()
        shell: bash
        env:
          WEBHOOK: ${{ secrets.DEV_UPDATES_DISCORD_WEBHOOK }}
        run: |
          STATUS="${{ job.status }}"
          VERSION="${{ steps.version.outputs.version }}"
          STATIC_DEB_NAME="${{ steps.assets.outputs.static_deb_name }}"
          MSG=" HARDN Latest Updated (v${VERSION}): https://github.com/${{ github.repository }}/releases/tag/latest"

          if command -v hardn-discord.sh >/dev/null 2>&1; then
            if [[ "$STATUS" == "success" ]]; then
              hardn-discord.sh "LATEST RELEASE UPDATED" "$MSG" || true
            else
              hardn-discord.sh "LATEST RELEASE FAILED" "$MSG" || true
            fi
          elif [[ -n "${WEBHOOK:-}" ]]; then
            COLOR=15105570  # Default gray
            [[ "$STATUS" == "success" ]] && COLOR=3066993 || true  # Green
            [[ "$STATUS" == "failure" ]] && COLOR=15158332 || true  # Red

            if [[ "$STATUS" == "success" ]]; then
              DESCRIPTION=" **Latest Release Updated**\\n**Package**: \`${STATIC_DEB_NAME}\`\\n**Version**: \`${VERSION}\`\\n**Status**: **${STATUS}** on branch \`${{ github.ref_name }}\`\\n✅ Static download URL ready!"
            else
              DESCRIPTION=" **Latest Release Update Failed**\\n**Version**: \`${VERSION}\`\\n**Status**: **${STATUS}** on branch \`${{ github.ref_name }}\`"
            fi

            curl -H "Content-Type: application/json" -X POST "$WEBHOOK" \
              -d "{\"embeds\":[{\"title\":\"HARDN Latest Release Pipeline • ${{ github.repository }}\",\"description\":\"$DESCRIPTION\",\"color\":$COLOR,\"url\":\"$MSG\"}]}" || true
          else
            echo "[INFO] No Discord webhook configured; skipping notification."
          fi


