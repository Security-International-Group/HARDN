name: SAST

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always

jobs:
  codeql:
    name: CodeQL Analysis (${{ matrix.language }})
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: python
            build-mode: none
          - language: rust
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          queries: security-extended,security-and-quality

      - name: Set up Rust toolchain
        if: matrix.language == 'rust'
        uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
        with:
          components: rustfmt, clippy

      - name: Build Rust project
        if: matrix.language == 'rust'
        run: |
          cargo check
          cargo build --release

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:${{ matrix.language }}

  static-analysis:
    name: Static Analysis (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: codeql
    strategy:
      fail-fast: false
      matrix:
        language: [rust, python]
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Rust toolchain
        if: matrix.language == 'rust'
        uses: actions-rust-lang/setup-rust-toolchain@v1.11.0
        with:
          components: rustfmt, clippy

      - name: Run cargo clippy
        if: matrix.language == 'rust'
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b6
        with:
          python-version: '3.11'

      - name: Run Ruff static analysis
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install ruff
          ruff check .

  summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs:
      - codeql
      - static-analysis
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          {
            echo '# Security Scan Results'
            echo
             echo '## Job Status Summary'
                  if [ "${{ needs.codeql.result }}" = "success" ]; then
                    echo "- :one: CodeQL Analysis Passed"
                  else
                    echo "- :one: CodeQL Analysis Failed"
                  fi
                  if [ "${{ needs.static-analysis.result }}" = "success" ]; then
                    echo "- :two: Static Analysis Passed"
                  else
                    echo "- :two: Static Analysis Failed"
            fi
            echo
            echo '## Scan Coverage'
            echo '- **Languages**: Rust, Python'
            echo '- **Tools**: CodeQL, cargo clippy, Ruff'
            echo
            echo '## Next Steps'
            if [ "${{ needs.codeql.result }}" != "success" ] || [ "${{ needs.static-analysis.result }}" != "success" ]; then
              echo 'Some security scans failed. Please review the detailed results above and address any issues.'
            else
              echo 'All security scans passed!'
            fi
          } >> "$GITHUB_STEP_SUMMARY"

