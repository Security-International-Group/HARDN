#!/bin/bash
set -e

LEGACY_MODULE_DIR="/usr/lib/hardn/src/setup/modules"
LEGACY_TOOL_DIR="/usr/lib/hardn/src/setup/tools"
        if [ -d "systemd" ]; then
            for service_file in systemd/*.service; do
                if [ -f "$service_file" ]; then
                    install -m 644 "$service_file" /lib/systemd/system/ || true
                fi
            done
        fi
        
        # Reload systemd if any services were installed
        if [ -d "systemd" ] && command -v systemctl >/dev/null; then
            systemctl daemon-reload || true
        fi

RUNTIME_ROOT="/usr/share/hardn"
MODULE_DIR="${RUNTIME_ROOT}/modules"
TOOL_DIR="${RUNTIME_ROOT}/tools"
TEMPLATE_DIR="${RUNTIME_ROOT}/templates"

PROFILE_D_FILE="/etc/profile.d/hardn-paths.sh"

case "$1" in
    configure)

        # Create system user and group
        if ! getent passwd hardn >/dev/null; then
            adduser --system --group --home /var/lib/hardn --shell /usr/sbin/nologin hardn
        fi

        # Create symlink for backward compatibility
        if [ -f /usr/bin/hardn ] && [ ! -e /usr/bin/hardn ]; then
            ln -sf /usr/bin/hardn /usr/bin/hardn
        fi

        # Log directory
        install -d -m 750 -o hardn -g hardn /var/log/hardn

        # Config directory
        if [ -d /etc/hardn ]; then
            chown root:hardn /etc/hardn
            chmod 750 /etc/hardn
        fi

        # Backup directory
        install -d -m 750 -o hardn -g hardn /var/lib/hardn/backups

        # Deploy default config if missing
        if [ ! -f /etc/hardn/hardn.conf ] && [ -f "${TEMPLATE_DIR}/hardn.conf" ]; then
            cp "${TEMPLATE_DIR}/hardn.conf" /etc/hardn/
            chown root:hardn /etc/hardn/hardn.conf
            chmod 640 /etc/hardn/hardn.conf
        fi

        # Ensure runtime dirs
        install -d -m 755 -o root -g root "${MODULE_DIR}" "${TOOL_DIR}" "${TEMPLATE_DIR}"

        # Sync legacy modules if present
        if [ -d "${LEGACY_MODULE_DIR}" ]; then
            cp -a "${LEGACY_MODULE_DIR}/." "${MODULE_DIR}/" || true
        fi

        # Sync legacy tools if present
        if [ -d "${LEGACY_TOOL_DIR}" ]; then
            cp -a "${LEGACY_TOOL_DIR}/." "${TOOL_DIR}/" || true
        fi

        # Symlink fallback if empty
        if [ -d "${LEGACY_MODULE_DIR}" ] && [ -z "$(ls -A "${MODULE_DIR}" 2>/dev/null)" ]; then
            rm -rf "${MODULE_DIR}" && ln -s "${LEGACY_MODULE_DIR}" "${MODULE_DIR}"
        fi
        if [ -d "${LEGACY_TOOL_DIR}" ] && [ -z "$(ls -A "${TOOL_DIR}" 2>/dev/null)" ]; then
            rm -rf "${TOOL_DIR}" && ln -s "${LEGACY_TOOL_DIR}" "${TOOL_DIR}"
        fi

        # Ensure scripts are executable
        chmod +x "${MODULE_DIR}"/*.sh 2>/dev/null || true
        chmod +x "${TOOL_DIR}"/*.sh 2>/dev/null || true
        chmod +x /usr/bin/hardn-service-manager 2>/dev/null || true

        # Create global env vars for module/tool search paths
        echo "#!/bin/sh
# HARDN module and tool search paths
export HARDN_MODULE_PATH=\"${MODULE_DIR}:${LEGACY_MODULE_DIR}\"
export HARDN_TOOL_PATH=\"${TOOL_DIR}:${LEGACY_TOOL_DIR}\"
" > "${PROFILE_D_FILE}"
        chmod 644 "${PROFILE_D_FILE}"

        # Install systemd service files if they exist
        if [ -d "systemd" ]; then
            for service_file in systemd/*.service; do
                if [ -f "$service_file" ]; then
                    install -m 644 "$service_file" /lib/systemd/system/ || true
                fi
            done
        fi
        
        # Reload and enable systemd services
        if command -v systemctl >/dev/null; then
            systemctl daemon-reload
            # Enable services in dependency order
            systemctl enable hardn.service || true
            systemctl enable legion-daemon.service || true
            systemctl enable hardn-api.service || true
            systemctl enable hardn-monitor.service || true
        else
            echo "systemctl not found, skipping service enablement."
        fi

        ICON_SRC="/usr/share/pixmaps/hardn-gui.jpeg"
        if [ -f "${ICON_SRC}" ]; then
            TARGET_USER="${SUDO_USER:-}"
            if [ -z "${TARGET_USER}" ] || [ "${TARGET_USER}" = "root" ]; then
                TARGET_USER=$(logname 2>/dev/null || true)
            fi

            if [ -n "${TARGET_USER}" ] && getent passwd "${TARGET_USER}" >/dev/null; then
                TARGET_HOME=$(getent passwd "${TARGET_USER}" | cut -d: -f6)
                if [ -n "${TARGET_HOME}" ] && [ -d "${TARGET_HOME}" ]; then
                    DESKTOP_DIR="${TARGET_HOME}/.local/share/applications"
                    ICON_DIR="${TARGET_HOME}/.local/share/icons"
                    DESKTOP_PATH="${DESKTOP_DIR}/hardn-gui.desktop"
                    ICON_DEST="${ICON_DIR}/hardn-gui.jpeg"

                    install -d -m 755 -o "${TARGET_USER}" -g "${TARGET_USER}" "${DESKTOP_DIR}" "${ICON_DIR}"
                    install -m 644 -o "${TARGET_USER}" -g "${TARGET_USER}" "${ICON_SRC}" "${ICON_DEST}"
                    cat <<EOF > "${DESKTOP_PATH}"
[Desktop Entry]
Type=Application
Name=HARDN Control Center
Comment=Launch the HARDN monitoring console
Exec=/usr/bin/hardn-gui
Icon=${ICON_DEST}
Terminal=false
Categories=Security;System;
StartupNotify=true
EOF
                    chown "${TARGET_USER}:${TARGET_USER}" "${DESKTOP_PATH}" "${ICON_DEST}" || true
                    echo "HARDN desktop launcher deployed for ${TARGET_USER}."
                else
                    echo "HARDN desktop launcher skipped: unable to resolve home for ${TARGET_USER}."
                fi
            else
                echo "HARDN desktop launcher skipped: no non-root sudo user detected."
            fi
        fi

        echo "HARDN installed successfully."
        echo "Run 'sudo hardn' to execute modules, or 'sudo hardn run-module <name>' for one module."
        echo "Environment paths set in ${PROFILE_D_FILE}"
        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        ;;

    *)
        echo "postinst called with unknown argument '$1'" >&2
        exit 1
        ;;
esac

exit 0